/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED BY BPFTOOL! */
#ifndef __MAPS_BPF_SKEL_H__
#define __MAPS_BPF_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

struct maps_bpf {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_map *events;
	} maps;

#ifdef __cplusplus
	static inline struct maps_bpf *open(const struct bpf_object_open_opts *opts = nullptr);
	static inline struct maps_bpf *open_and_load();
	static inline int load(struct maps_bpf *skel);
	static inline int attach(struct maps_bpf *skel);
	static inline void detach(struct maps_bpf *skel);
	static inline void destroy(struct maps_bpf *skel);
	static inline const void *elf_bytes(size_t *sz);
#endif /* __cplusplus */
};

static void
maps_bpf__destroy(struct maps_bpf *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
maps_bpf__create_skeleton(struct maps_bpf *obj);

static inline struct maps_bpf *
maps_bpf__open_opts(const struct bpf_object_open_opts *opts)
{
	struct maps_bpf *obj;
	int err;

	obj = (struct maps_bpf *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = maps_bpf__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	maps_bpf__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct maps_bpf *
maps_bpf__open(void)
{
	return maps_bpf__open_opts(NULL);
}

static inline int
maps_bpf__load(struct maps_bpf *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct maps_bpf *
maps_bpf__open_and_load(void)
{
	struct maps_bpf *obj;
	int err;

	obj = maps_bpf__open();
	if (!obj)
		return NULL;
	err = maps_bpf__load(obj);
	if (err) {
		maps_bpf__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
maps_bpf__attach(struct maps_bpf *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
maps_bpf__detach(struct maps_bpf *obj)
{
	bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *maps_bpf__elf_bytes(size_t *sz);

static inline int
maps_bpf__create_skeleton(struct maps_bpf *obj)
{
	struct bpf_object_skeleton *s;
	int err;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)	{
		err = -ENOMEM;
		goto err;
	}

	s->sz = sizeof(*s);
	s->name = "maps_bpf";
	s->obj = &obj->obj;

	/* maps */
	s->map_cnt = 1;
	s->map_skel_sz = sizeof(*s->maps);
	s->maps = (struct bpf_map_skeleton *)calloc(s->map_cnt, s->map_skel_sz);
	if (!s->maps) {
		err = -ENOMEM;
		goto err;
	}

	s->maps[0].name = "events";
	s->maps[0].map = &obj->maps.events;

	s->data = (void *)maps_bpf__elf_bytes(&s->data_sz);

	obj->skeleton = s;
	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return err;
}

static inline const void *maps_bpf__elf_bytes(size_t *sz)
{
	*sz = 2192;
	return (const void *)"\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x50\x05\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x0d\0\
\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\x11\x01\x25\x0e\x13\
\x05\x03\x0e\x10\x17\x1b\x0e\0\0\x02\x34\0\x03\x0e\x49\x13\x3f\x19\x3a\x0b\x3b\
\x0b\x02\x18\0\0\x03\x13\x01\x0b\x0b\x3a\x0b\x3b\x0b\0\0\x04\x0d\0\x03\x0e\x49\
\x13\x3a\x0b\x3b\x0b\x38\x0b\0\0\x05\x0f\0\x49\x13\0\0\x06\x01\x01\x49\x13\0\0\
\x07\x21\0\x49\x13\x37\x0b\0\0\x08\x24\0\x03\x0e\x3e\x0b\x0b\x0b\0\0\x09\x24\0\
\x03\x0e\x0b\x0b\x3e\x0b\0\0\x0a\x21\0\x49\x13\x37\x06\0\0\0\x9d\0\0\0\x04\0\0\
\0\0\0\x08\x01\0\0\0\0\x0c\0\x2c\0\0\0\0\0\0\0\x40\0\0\0\x02\x58\0\0\0\x33\0\0\
\0\x01\x05\x09\x03\0\0\0\0\0\0\0\0\x03\x18\x01\x01\x04\x5f\0\0\0\x5c\0\0\0\x01\
\x02\0\x04\x7c\0\0\0\x7b\0\0\0\x01\x03\x08\x04\x88\0\0\0\x8f\0\0\0\x01\x04\x10\
\0\x05\x61\0\0\0\x06\x6d\0\0\0\x07\x74\0\0\0\x1b\0\x08\x64\0\0\0\x05\x04\x09\
\x68\0\0\0\x08\x07\x05\x80\0\0\0\x06\x6d\0\0\0\x0a\x74\0\0\0\0\0\0\x01\0\x05\
\x94\0\0\0\x06\x6d\0\0\0\x07\x74\0\0\0\x01\0\0\x63\x6c\x61\x6e\x67\x20\x76\x65\
\x72\x73\x69\x6f\x6e\x20\x31\x35\x2e\x30\x2e\x36\x20\x28\x46\x65\x64\x6f\x72\
\x61\x20\x31\x35\x2e\x30\x2e\x36\x2d\x31\x2e\x66\x63\x33\x37\x29\0\x70\x72\x6f\
\x67\x72\x61\x6d\x73\x2f\x6d\x61\x70\x73\x2e\x62\x70\x66\x2e\x63\0\x2f\x68\x6f\
\x6d\x65\x2f\x67\x72\x61\x6e\x74\x2f\x6d\x6f\x64\x75\x6c\x61\x72\x2d\x62\x70\
\x66\0\x65\x76\x65\x6e\x74\x73\0\x74\x79\x70\x65\0\x69\x6e\x74\0\x5f\x5f\x41\
\x52\x52\x41\x59\x5f\x53\x49\x5a\x45\x5f\x54\x59\x50\x45\x5f\x5f\0\x6d\x61\x78\
\x5f\x65\x6e\x74\x72\x69\x65\x73\0\x70\x69\x6e\x6e\x69\x6e\x67\0\0\0\x9f\xeb\
\x01\0\x18\0\0\0\0\0\0\0\xe4\0\0\0\xe4\0\0\0\x3f\0\0\0\0\0\0\0\0\0\0\x02\x03\0\
\0\0\x01\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\x01\0\0\0\0\0\0\0\x03\0\0\0\0\x02\0\
\0\0\x04\0\0\0\x1b\0\0\0\x05\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\
\x02\x06\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x02\0\0\0\x04\0\0\0\0\0\0\x01\0\0\0\0\
\0\0\0\x02\x08\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x02\0\0\0\x04\0\0\0\x01\0\0\0\0\
\0\0\0\x03\0\0\x04\x18\0\0\0\x19\0\0\0\x01\0\0\0\0\0\0\0\x1e\0\0\0\x05\0\0\0\
\x40\0\0\0\x2a\0\0\0\x07\0\0\0\x80\0\0\0\x32\0\0\0\0\0\0\x0e\x09\0\0\0\x01\0\0\
\0\x39\0\0\0\x01\0\0\x0f\0\0\0\0\x0a\0\0\0\0\0\0\0\x18\0\0\0\0\x69\x6e\x74\0\
\x5f\x5f\x41\x52\x52\x41\x59\x5f\x53\x49\x5a\x45\x5f\x54\x59\x50\x45\x5f\x5f\0\
\x74\x79\x70\x65\0\x6d\x61\x78\x5f\x65\x6e\x74\x72\x69\x65\x73\0\x70\x69\x6e\
\x6e\x69\x6e\x67\0\x65\x76\x65\x6e\x74\x73\0\x2e\x6d\x61\x70\x73\0\x31\0\0\0\
\x04\0\x2b\0\0\0\x08\x01\x01\xfb\x0e\x0d\0\x01\x01\x01\x01\0\0\0\x01\0\0\x01\
\x70\x72\x6f\x67\x72\x61\x6d\x73\0\0\x6d\x61\x70\x73\x2e\x62\x70\x66\x2e\x68\0\
\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x57\0\0\0\
\x04\0\xf1\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x04\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x07\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x03\0\x0a\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x15\0\0\0\x11\0\x03\0\0\0\0\0\0\
\0\0\0\x18\0\0\0\0\0\0\0\x06\0\0\0\0\0\0\0\x03\0\0\0\x02\0\0\0\x0c\0\0\0\0\0\0\
\0\x03\0\0\0\x03\0\0\0\x12\0\0\0\0\0\0\0\x03\0\0\0\x03\0\0\0\x16\0\0\0\0\0\0\0\
\x03\0\0\0\x04\0\0\0\x1a\0\0\0\0\0\0\0\x03\0\0\0\x03\0\0\0\x1f\0\0\0\0\0\0\0\
\x03\0\0\0\x03\0\0\0\x2b\0\0\0\0\0\0\0\x02\0\0\0\x05\0\0\0\x38\0\0\0\0\0\0\0\
\x03\0\0\0\x03\0\0\0\x44\0\0\0\0\0\0\0\x03\0\0\0\x03\0\0\0\x50\0\0\0\0\0\0\0\
\x03\0\0\0\x03\0\0\0\x6e\0\0\0\0\0\0\0\x03\0\0\0\x03\0\0\0\x75\0\0\0\0\0\0\0\
\x03\0\0\0\x03\0\0\0\xf4\0\0\0\0\0\0\0\x04\0\0\0\x05\0\0\0\x05\0\x2e\x64\x65\
\x62\x75\x67\x5f\x61\x62\x62\x72\x65\x76\0\x2e\x74\x65\x78\x74\0\x65\x76\x65\
\x6e\x74\x73\0\x2e\x6d\x61\x70\x73\0\x2e\x64\x65\x62\x75\x67\x5f\x73\x74\x72\0\
\x2e\x72\x65\x6c\x2e\x64\x65\x62\x75\x67\x5f\x69\x6e\x66\x6f\0\x2e\x6c\x6c\x76\
\x6d\x5f\x61\x64\x64\x72\x73\x69\x67\0\x2e\x64\x65\x62\x75\x67\x5f\x6c\x69\x6e\
\x65\0\x6d\x61\x70\x73\x2e\x62\x70\x66\x2e\x63\0\x2e\x73\x74\x72\x74\x61\x62\0\
\x2e\x73\x79\x6d\x74\x61\x62\0\x2e\x72\x65\x6c\x2e\x42\x54\x46\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x62\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\xd1\x04\0\0\0\0\0\0\x7b\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0f\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x1c\0\0\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\
\0\0\x18\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\
\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x58\0\0\0\0\0\0\0\x71\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x31\0\0\0\x01\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc9\0\0\0\0\0\0\0\xa1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x2d\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\xc0\0\0\0\0\0\0\0\x0c\0\0\0\x05\0\0\0\x08\0\0\0\
\0\0\0\0\x10\0\0\0\0\0\0\0\x22\0\0\0\x01\0\0\0\x30\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x6a\x01\0\0\0\0\0\0\x90\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\x01\
\0\0\0\0\0\0\0\x76\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xfc\x01\0\0\
\0\0\0\0\x3b\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x72\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc0\x04\0\0\0\0\0\0\x10\
\0\0\0\0\0\0\0\x0c\0\0\0\x08\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x4b\0\0\
\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x37\x03\0\0\0\0\0\0\x35\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x3d\0\0\0\x03\x4c\xff\
\x6f\0\0\0\x80\0\0\0\0\0\0\0\0\0\0\0\0\xd0\x04\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\
\x0c\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x6a\0\0\0\x02\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x70\x03\0\0\0\0\0\0\x90\0\0\0\0\0\0\0\x01\0\0\0\x05\
\0\0\0\x08\0\0\0\0\0\0\0\x18\0\0\0\0\0\0\0";
}

#ifdef __cplusplus
struct maps_bpf *maps_bpf::open(const struct bpf_object_open_opts *opts) { return maps_bpf__open_opts(opts); }
struct maps_bpf *maps_bpf::open_and_load() { return maps_bpf__open_and_load(); }
int maps_bpf::load(struct maps_bpf *skel) { return maps_bpf__load(skel); }
int maps_bpf::attach(struct maps_bpf *skel) { return maps_bpf__attach(skel); }
void maps_bpf::detach(struct maps_bpf *skel) { maps_bpf__detach(skel); }
void maps_bpf::destroy(struct maps_bpf *skel) { maps_bpf__destroy(skel); }
const void *maps_bpf::elf_bytes(size_t *sz) { return maps_bpf__elf_bytes(sz); }
#endif /* __cplusplus */

__attribute__((unused)) static void
maps_bpf__assert(struct maps_bpf *s __attribute__((unused)))
{
#ifdef __cplusplus
#define _Static_assert static_assert
#endif
#ifdef __cplusplus
#undef _Static_assert
#endif
}

#endif /* __MAPS_BPF_SKEL_H__ */
